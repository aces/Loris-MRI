name: Python checks

on:
  - push
  - pull_request

jobs:
  ruff:
    name: "Ruff"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    container:
      image: ./test/python
      env:
        python-version: ${{ matrix.python-version }}

    steps:
    - name: Check out LORIS-MRI
      uses: actions/checkout@v4

    # - name: Set up Python
    #  uses: ./.github/actions/setup-python
    #  with:
    #    python-version: ${{ matrix.python-version }}

    - name: Run Ruff
      run: ruff check --output-format=github

  pyright-strict:
    name: "Pyright strict"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Check out LORIS-MRI
      uses: actions/checkout@v4

    - name: Set up Python
      uses: ./.github/actions/setup-python
      with:
        python-version: ${{ matrix.python-version }}

      # Like in the other Pyright run, the `jq` arcane is used to translate the errors from JSON to
      # the GitHub actions format
    - name: Run Pyright
      run: |
        pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
        (exit ${PIPESTATUS[0]})

  pyrigh-global:
    name: "Pyright global"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    steps:
    - name: Check out LORIS-MRI
      uses: actions/checkout@v4

    - name: Set up Python
      uses: ./.github/actions/setup-python
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run Pyright
      run: |
        cd test
        pyright --outputjson | jq -r '.generalDiagnostics[] | "::error file=\(.file),line=\(.range.start.line),col=\(.range.start.character)::\(.message)"'
        (exit ${PIPESTATUS[0]})
