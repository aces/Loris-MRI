#! /usr/bin/perl
# $Id: tarchiveLoader,v 1.24 2007/12/18 16:00:21 sebas Exp $

=pod

=head1 NAME

tarchiveLoader -- this script performs the following:

- validation of the tarchive

- conversion of DICOM datasets into MINC files

- automated protocol checks against the entries in the C<mri_protocol> and
optionally, C<mri_protocol_checks> tables.


=head1 SYNOPSIS

perl uploadNeuroDB/tarchiveLoader </path/to/DICOM-tarchive> C<[options]>


Available options are:

-profile                    : Name of the config file in
                              C<../dicom-archive/.loris_mri>

-force                      : Force the script to run even if the validation
                              has failed

-reckless                   : Upload data to database even if study protocol is
                              not defined or violated

-globLocation               : Loosen the validity check of the tarchive allowing
                              for the possibility that the tarchive was moved to
                              a different directory

-noJIV                      : Prevent the JIVs from being created

-newScanner                 : By default a new scanner will be registered if the
                              data you upload requires it. You can risk turning
                              it off

-keeptmp                    : Keep temporary directory. Make sense if have
                              infinite space on your server

-xlog                       : Open an xterm with a tail on the current log file

-verbose                    : If set, be verbose

-seriesuid                  : Only insert this SeriesUID

-acquisition_protocol       : Suggest the acquisition protocol to use

-bypass_extra_file_checks   : Bypass extra_file_checks


=head1 DESCRIPTION


This script interacts with the NeuroDB database system. It will fetch or modify
contents of the following tables:
C<session>, C<parameter_file>, C<parameter_type>, C<parameter_type_category>,
C<files>, C<mri_staging>, C<notification_spool>



=head2 Methods

=cut


use strict;
use warnings;
no warnings 'once';
use Carp;
use Getopt::Tabular;
use FileHandle;
use File::Basename;
use File::Temp qw/ tempdir /;
use Data::Dumper;
use FindBin;
use Cwd qw/ abs_path /;
# These are the NeuroDB modules to be used
use lib "$FindBin::Bin";

use NeuroDB::File;
use NeuroDB::MRI;
use NeuroDB::DBI;
use NeuroDB::Notify;
use NeuroDB::MRIProcessingUtility;
# Turn on autoflush for standard output buffer so that we immediately see 
#the results of print statements.
$|++;

## Starting the program
my $versionInfo = sprintf "%d revision %2d", q$Revision: 1.24 $ 
=~ /: (\d+)\.(\d+)/;
## needed for log and template
my ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) 
    =localtime(time);
my $date        = sprintf(
                    "%4d-%02d-%02d %02d:%02d:%02d",
                     $year+1900,$mon+1,$mday,$hour,$min,$sec
                  );
my $debug       = 0;  
my $message     = '';
my $tarchive_srcloc = '';
my $upload_id   = undef;
my $verbose     = 0;           # default, overwritten if the scripts are run
                               # with -verbose
my $notify_detailed   = 'Y';   # notification_spool message flag for messages to
                               # be displayed
                               # with DETAILED OPTION in the front-end/
                               # imaging_uploader
my $notify_notsummary = 'N';   # notification_spool message flag for messages to
                               # be displayed
                               # with SUMMARY Option in the front-end/
                               # imaging_uploader
my $profile     = 'prod';      # this should never be set unless you are in a
                               # stable production environment
my $reckless    = 0;           # this is only for playing and testing. Don't 
                               #set it to 1!!!
my $force       = 0;           # This is a flag to force the script to run  
                               # Even if the validation has failed
my $NewScanner  = 1;           # This should be the default unless you are a 
                               #control freak
my $xlog        = 0;           # default should be 0
my $globArchiveLocation = 0;   # whether to use strict ArchiveLocation strings
                               # or to glob them (like '%Loc')
my $no_jiv      = 0;           # Should bet set to 1, if jivs should not be 
                               # created
my $valid_study = 0;
my $newTarchiveLocation = undef;
my $seriesuid   = undef;       # if you want to insert a specific SeriesUID
my $bypass_extra_file_checks=0;# If you need to bypass the extra_file_checks,
                               # set to 1.
my $acquisitionProtocol;       # Specify the acquisition Protocol also bypasses
                               # the checks
my @opt_table = (
                 ["Basic options","section"],
                 ["-profile     ","string",1, \$profile,
                  "Name of config file in ../dicom-archive/.loris_mri"
                 ],
                 ["-force", "boolean", 1, \$force,"Force the script to run ".
                 "even if the validation has failed."],
                 ["Advanced options","section"],
                 ["-reckless", "boolean", 1, \$reckless,"Upload data to ".
                  "database even if study protocol is not defined or violated."
                 ],
                 ["-globLocation", "boolean", 1, \$globArchiveLocation,
                  "Loosen the validity check of the tarchive allowing for ".
                  "the possibility that the tarchive was moved to a different".
                  " directory."
                 ],
                 ["-noJIV", "boolean", 1, \$no_jiv,"Prevent the JIVs from being".
                  "created."],
                 ["-newScanner", "boolean", 1, \$NewScanner, "By default a".
                   " new scanner will be registered if the data you upload".
                   " requires it. You can risk turning it off."
                 ],
                 ["Fancy options","section"],
# fixme		 ["-keeptmp", "boolean", 1, \$keep, "Keep temporay directory. Make
# sense if have infinite space on your server."],
                 ["-xlog", "boolean", 1, \$xlog,"Open an xterm with a tail on".
                  "the current log file."
                 ],
                 ["General options", "section"],
                 ["-verbose", "boolean", 1,   \$verbose, "Be verbose."],
                 ["-seriesuid", "string", 1, \$seriesuid, "Only insert this SeriesUID"],
                 ["-acquisition_protocol","string", 1, \$acquisitionProtocol,
                  "Suggest the acquisition protocol to use."],
                 ["-bypass_extra_file_checks", "boolean", 1, \$bypass_extra_file_checks,
                  "Bypass extra_file_checks."],
                 );

my $Help = <<HELP;
******************************************************************************
TARCHIVE LOADER 
******************************************************************************

Author  :   J-Sebastian Muehlboeck based on Jonathan Harlap\'s process_uploads 
            using the all singing and dancing (eierlegende Wollmilchsau) 
            NeuroDB lib
Date    :   2006/12/20
Version :   $versionInfo

This takes a [dicom{T(ar}]chive) as an argument and 
performs a lot of magic on the acquisitions within it.  

- archive verification
- candidate id extraction and/or neurodb candidate creation
- study site determination
- scanner identity check  
- dicom to minc conversion
- miscellaneous header data extraction
- file relocation (to the MRI repository)
- neuroDB mri database registration and JIVification.

Documentation: perldoc tarchiveLoader

HELP

my $Usage = <<USAGE;
usage: $0 </path/to/DICOM-tarchive> [options]
       $0 -help to list options

USAGE
&Getopt::Tabular::SetHelp($Help, $Usage);
&Getopt::Tabular::GetOptions(\@opt_table, \@ARGV) || exit 1;

################################################################
################### input option error checking ################
################################################################
{ package Settings; do "$ENV{LORIS_CONFIG}/.loris_mri/$profile" }

if ($profile && !@Settings::db) { 
    print "\n\tERROR: You don't have a configuration file named ". 
          "'$profile' in:  $ENV{LORIS_CONFIG}/.loris_mri/ \n\n"; 
    exit 2; 
}
if (!$ARGV[0] || !$profile) { 
    print $Help; 
    print "$Usage\n\tERROR: You must specify a valid tarchive and an ".
          "existing profile.\n\n";
    exit 3;  
}

################################################################
######### Establish database connection ########################
################################################################
my $dbh = &NeuroDB::DBI::connect_to_db(@Settings::db);
$message ="\n==> Successfully connected to database \n";

my $tarchive = $ARGV[0];
my $tarchivePath = NeuroDB::DBI::getConfigSetting(
                        \$dbh,'tarchiveLibraryDir'
                        );
unless ($tarchive =~ m/$tarchivePath/i) {
    $tarchive = ($tarchivePath . "/" . $tarchive);
}

unless (-e $tarchive) {
    print "\nERROR: Could not find archive $tarchive. \n ".
          "Please, make sure the path to the archive is correct. ". 
          "Upload will exit now.\n\n\n";
    exit 4;
}


################################################################
#### These settings are in the database, & are     #############
#### accessible through the Configuration Module   #############
################################################################
my $data_dir = NeuroDB::DBI::getConfigSetting(
                 \$dbh,'dataDirBasepath'
                 );
my $pic_dir = $data_dir.'/pic';
my $jiv_dir = $data_dir.'/jiv';
my $prefix = NeuroDB::DBI::getConfigSetting(
               \$dbh,'prefix'
               );
my $converter = NeuroDB::DBI::getConfigSetting(
                 \$dbh,'converter'
                 );
my $mail_user = NeuroDB::DBI::getConfigSetting(
                 \$dbh,'mail_user'
                 );
my $get_dicom_info = NeuroDB::DBI::getConfigSetting(
                 \$dbh,'get_dicom_info'
                 );
my $exclude          = "localizer"; # case insensitive
my $template         = "TarLoad-$hour-$min-XXXXXX"; # for tempdir
my $User             = `whoami`;

# fixme there are better ways 
my @progs = ("convert", "Mincinfo_wrapper", "mincpik", $converter);
# create the temp dir
my $TmpDir = tempdir(
                 $template, TMPDIR => 1, CLEANUP => 1 
             );
# create logdir(if !exists) and logfile
my @temp     = split(/\//, $TmpDir); 
my $templog  = $temp[$#temp];
my $LogDir   = "$data_dir/logs"; 
if (!-d $LogDir) { 
    mkdir($LogDir, 0770); 
}
my $logfile  = "$LogDir/$templog.log";
open LOG, ">$logfile";
LOG->autoflush(1);
&logHeader();

print LOG $message;

################################################################
############### If xlog is set, fork a tail on log file. #######
################################################################
my $childPID; 
if ($xlog) { 
    $childPID = fork(); 
    if ($childPID == 0) { 
        exec("xterm -geometry 130x70 -e tail -f $logfile"); 
        exit(0); 
    } 
}

################################################################
# get useful information from the tarchive table  - The regex is
# very study specific... !!!!!! fixme
# Fixme figure out a way to get rid of study specific ways of
# extracting information ... if there is
# This will query the tarchive and retrieve (hopefully) enough
# information to continue the upload.
# fixme documentation needed
################################################################

################################################################
################## Instantiate MRIProcessingUtility ############
################################################################
my $utility = NeuroDB::MRIProcessingUtility->new(
                  \$dbh,$debug,$TmpDir,$logfile,
                  $LogDir,$verbose
              );

################################################################
################ Register programs #############################
################################################################
$utility->registerProgs(@progs);

################################################################
##### make the notifier object #################################
################################################################
my $notifier = NeuroDB::Notify->new(\$dbh);

################################################################
################ Construct the tarchiveInfo Array ##############
################################################################
my $tarchiveLibraryDir = NeuroDB::DBI::getConfigSetting(
                            \$dbh,'tarchiveLibraryDir'
                            );
$tarchiveLibraryDir    =~ s/\/$//g;
my $ArchiveLocation    = $tarchive;
$ArchiveLocation       =~ s/$tarchiveLibraryDir\/?//g;
my %tarchiveInfo = $utility->createTarchiveArray(
                       $ArchiveLocation,
                       $globArchiveLocation
                   );

################################################################
################## Call the validation script ##################
################################################################
my $script = "tarchive_validation.pl $tarchive -profile $profile";

if ($globArchiveLocation) {
    $script .= " -globLocation";
}

if ($verbose) {
    $script .= " -verbose";
}
################################################################
###### Note: system call returns the process ID ################
###### To the actual exit value, shift right by ################
###### eight as done below #####################################
################################################################
my $output = system($script); 
$output = $output >> 8;

################################################################
### get the UploadID to log in the notification spool table ####
################################################################
# first get the tarchive SourceLocation from $tarchiveInfo 
$tarchive_srcloc = $tarchiveInfo{'SourceLocation'};
# then get the upload_id from tarchive_srcloc
my $query =
        "SELECT UploadID FROM mri_upload "
        . "WHERE DecompressedLocation =?";
my $sth = $dbh->prepare($query);
$sth->execute($tarchive_srcloc);
$upload_id = $sth->fetchrow_array;

################################################################
#############Exit if the is_valid is false and $force is not####
################################################################
if (($output != 0)  && ($force==0)) {
 $message = "\n ERROR: The validation has failed. Either re-run the ".
            "validation again and fix the problem. Or re-run ".
            "tarchiveLoader using -force to force the execution.\n\n";
 $utility->writeErrorLog($message,5,$logfile); 
 $notifier->spool('tarchive validation', $message, 0, 
		'tarchiveLoader', $upload_id, 'Y',
		$notify_notsummary);
 exit 5;
}

################################################################
########## Get the $center_name, $centerID ################
################################################################
my ($center_name, $centerID) =
     $utility->determinePSC(\%tarchiveInfo,0);

################################################################
######### Determine the ScannerID ##############################
################################################################
my $scannerID = $utility->determineScannerID(
                    \%tarchiveInfo,0,
                    $centerID,
                    $NewScanner
                );

################################################################
###### Construct the $subjectIDsref array ######################
################################################################
my $subjectIDsref = $utility->determineSubjectID(
                        $scannerID,
                        \%tarchiveInfo,0
                    );

################################################################
###### Get the SessionID #######################################
################################################################
if (!defined($subjectIDsref->{'visitLabel'})) { 
    $subjectIDsref->{'visitLabel'} = 
    $utility->lookupNextVisitLabel(
        $subjectIDsref->{'CandID'}, 
        \$dbh
    ); 
}
my ($sessionID, $requiresStaging) =
    NeuroDB::MRI::getSessionID(
         $subjectIDsref, $tarchiveInfo{'DateAcquired'},
         \$dbh, $subjectIDsref->{'subprojectID'}
    );

################################################################
###### Extract the tarchive and feed the dicom data ############
###### Dir to the uploader #####################################
################################################################
my ($ExtractSuffix,$study_dir,$header) = 
    $utility->extractAndParseTarchive(
        $tarchive, $tarchiveInfo{'SourceLocation'}, $seriesuid);


################################################################
##################### convert the dicom data to minc ###########
################################################################
$utility->dicom_to_minc(
    $study_dir,$converter,$get_dicom_info,
    $exclude,$mail_user, $tarchiveInfo{'SourceLocation'});


################################################################
############### get a list of mincs ############################
################################################################
my @minc_files = ();
$utility->get_mincs(\@minc_files,
		     	 $tarchiveInfo{'SourceLocation'});
my $mcount = $#minc_files + 1;
$message = "\nNumber of MINC files that will be considered for inserting ".
      "into the database: $mcount\n";
$notifier->spool('tarchive loader', $message, 0,
		'tarchiveLoader', $upload_id, 'N', 
		$notify_detailed);
if ($verbose){
    print $message;
}
################################################################
# If no good data was found stop processing and write error log.
################################################################
if ($mcount < 1) { 
    $message = "\nNo data could be converted into valid MINC files. ".
               "Localizers will not be considered! \n" ; 
    $utility->writeErrorLog($message,6,$logfile); 
    $notifier->spool('tarchive loader', $message, 0,
		    'tarchiveLoader', $upload_id, 'Y',
		    $notify_notsummary);
    exit 6; 
}

################################################################
#################### LOOP through MINCs ########################
# At this step we actually have (multiple) MINC files so we loop
# a valid study has at least one file that can be uploaded #####
################################################################
my $minc_inserted = 0;
foreach my $minc (@minc_files) {

    ############################################################
    # if the tarchive has not been moved yet ###################
    # ($valid_study undefined)-> move the tarchive from the ####
    # inbox into the tarchive library ##########################
    ############################################################
    if ((!defined($tarchivePath)) || 
        (defined($tarchivePath) &&    
        ($tarchive =~ m/$tarchivePath\/\d\d\d\d\//i))) { 
            $newTarchiveLocation = $tarchive; 
    }
    elsif (!$valid_study) {
        $newTarchiveLocation = 
            $utility->moveAndUpdateTarchive($tarchive,
					\%tarchiveInfo);
    }
    $tarchive = $newTarchiveLocation;

    ###########################################################
    ############# Call the minc_insertion script ##############
    ###########################################################

    $script = "minc_insertion.pl -tarchivePath $tarchive ".
              "-mincPath $minc -profile $profile";

    if ($force) {
        $script .= " -force";
    }

    if ($globArchiveLocation) {
        $script .= " -globLocation";
    }

    if ($no_jiv) {
        $script .= " -noJIV";
    }
 
    if ($verbose) {
        $script .= " -verbose";
    }

    if ($acquisitionProtocol) {
        $script .= " -acquisition_protocol " . $acquisitionProtocol;
    }

    if ($bypass_extra_file_checks) {
        $script .= " -bypass_extra_file_checks";
    }

    # Should be kept last
    if ($debug) {
        print $script . "\n";
    }
    ###########################################################
    ## Note: system call returns the process ID ###############
    ## To get the actual exit value, shift right by eight as ##
    ## done below #############################################
    ###########################################################

    $output = system($script);
    $output = $output >> 8;
    ###########################################################
    #### if the return code of the script is 0 ################
    #### mark the study as valid because this means at least ##
    #### one volume will be inserted into the DB ##############
    ###########################################################
    if ($output==0) {
       $minc_inserted++;
       $valid_study = 1;
    }

} # end foreach $minc

################################################################
############### Compute SNR on 3D modalities ###################
################################################################
$utility->computeSNR($tarchiveInfo{TarchiveID},
                         $tarchiveInfo{'SourceLocation'},
			 $profile);
################################################################
####### Add order of acquisition for similar modalities ########
####### within the same session based on series number #########
################################################################
$utility->orderModalitiesByAcq($tarchiveInfo{TarchiveID},
                         $tarchiveInfo{'SourceLocation'});


if ($valid_study) {

    ############################################################
    ### Update the number_of_mincCreated #######################
    ### And number_of_mincInserted #############################
    ############################################################
    my $where = "WHERE TarchiveID=?";

    $query =
        "SELECT number_of_mincInserted FROM mri_upload ";
    $query = $query . $where;
    if ($debug) {
        print $query . "\n";
    }

    my $sth = $dbh->prepare($query);
    $sth->execute($tarchiveInfo{TarchiveID});
    my $oldCount = $sth->fetchrow_array;
    my $newCount = $minc_inserted + $oldCount;

    $query = "UPDATE mri_upload SET number_of_mincInserted=?, ".
                 "number_of_mincCreated=? ";
    $query = $query . $where;
    if ($debug) {
        print $query . "\n";
    }

    my $mri_upload_update = $dbh->prepare($query);
    $mri_upload_update->execute(
               $newCount,$mcount,$tarchiveInfo{TarchiveID}
    );
 
    ############################################################
    ############# Create minc-pics #############################
    ############################################################
    print "\nCreating Minc Pics\n" if $verbose;
    NeuroDB::MRI::make_minc_pics(\$dbh,
                                  $tarchiveInfo{TarchiveID},
                                  $profile,
                                  0, # minFileID $row[0], maxFileID $row[1]
                                  $debug, 
                                  $verbose);
    
    ############################################################
    # spool a new study message ################################
    ############################################################
    $message =             
	    "\n" . $subjectIDsref->{'CandID'} . 
            " " . $subjectIDsref->{'PSCID'} .
            " " . $subjectIDsref->{'visitLabel'} .
            "\tacquired ". $tarchiveInfo{'DateAcquired'} .
	    "\n";
    $notifier->spool('mri new study', $message, 0,
		    'tarchiveLoader', $upload_id, 'N', 
		    $notify_detailed);
    ############################################################
    #### link the tarchive and mri_upload table  with session ##
    ############################################################
     $where = "WHERE t.TarchiveID=?";
     $query = "UPDATE tarchive t ".
            "JOIN mri_upload m ON (m.tarchiveID=t.tarchiveID) ".
            "SET t.SessionID =?, m.sessionID=? ";
     $query = $query . $where;
     if ($debug) {
        print $query . "\n";
     }
     my $session_update = $dbh->prepare($query);
     $session_update->execute(
              $sessionID,
              $sessionID,
              $tarchiveInfo{'TarchiveID'}
     );

} else {
    ############################################################
    ## spool a failure message This has been changed to tarchive
    ## instead of using patientName ############################
    ############################################################
    $message = 
	    "\n" . $tarchive. " acquired ". 
            $tarchiveInfo{'DateAcquired'} .
            " was deemed invalid\n\n". $study_dir .
	    "\n";
    $notifier->spool('mri invalid study', $message, 0,
		    'tarchiveLoader', $upload_id, 'Y', 
		    $notify_notsummary);
}

################################################################
# make final logfile name without overwriting phantom logs #####
################################################################
my $final_logfile = $center_name."_".$tarchiveInfo{'DateAcquired'}.
                    '_'.$subjectIDsref->{'CandID'};
if ($subjectIDsref->{'isPhantom'}) { 
    $final_logfile = $subjectIDsref->{'PSCID'}."_".
    $tarchiveInfo{'DateAcquired'}.'_'.$subjectIDsref->{'CandID'}; 
}

################################################################
### tarchiveLocation ###########################################
### if something went wrong and there is no acq date and CandID 
################################################################
unless($tarchiveInfo{'DateAcquired'} && $subjectIDsref->{'CandID'}) { 
    $final_logfile .= '_'.$temp[$#temp]; 
}
$final_logfile .= '.log.gz';

################################################################
# fixme for now we assume that extracted data will not be kept #
################################################################
my $cleanup = "rm -rf ${TmpDir}/${ExtractSuffix}*";
$message = "\nCleaning up temp files: $cleanup\n";
print $message if $verbose;
`$cleanup`;

################################################################
## if there are leftovers, dump them in the trashbin ###########
################################################################
my @leftovers = `\\ls -1 $TmpDir`;

if (scalar(@leftovers) > 0) {
    my $trashdir = $data_dir . '/trashbin/' . $temp[$#temp];
    $message = "\n==> LEFTOVERS: ".scalar(@leftovers).
    "\n --> Moving leftovers to $trashdir\n";
    $notifier->spool('tarchive loader', $message, 0,
		    'tarchiveLoader', $upload_id, 'Y', 
		    $notify_notsummary);
    print LOG $message;
    `mkdir -p -m 770 $trashdir`;
    `chmod -R u+w $TmpDir/*`;
    `mv $TmpDir/* $trashdir`;
    open MAIL, "| mail $mail_user";
    print MAIL "Subject: [URGENT Automated] upload NeuroDB leftovers!\n";
    print MAIL "Moved some leftovers to $trashdir\n";
    print MAIL "Log of process in $data_dir/logs/$final_logfile\n";
    print MAIL "Files left over:\n".join("", @leftovers)."\n";
    close MAIL;
}
$message ="\n==> Done tarchiveLoader execution!  Removing $TmpDir.\n";
$notifier->spool('tarchive loader', $message, 0,
		'tarchiveLoader', $upload_id, 'N', 
		$notify_detailed);
print LOG $message;
close LOG;
`gzip -9 $logfile`;
my $cmd = "mv $logfile.gz $data_dir/logs/$final_logfile";
`$cmd`;
################################################################
############# kill the xterm with the tail on log ##############
################################################################
if ($xlog) {
    `kill -9 $childPID`;
}
################################################################
############# if no mincs are inserted or the valid_study is ###
############## false, the exit code will not be 0 ##############
################################################################

if (!$valid_study) {
    $message =  "\n No Mincs inserted \n \n";
    print ($message);
    $notifier->spool('mri invalid study', $message, 0,
		    'tarchiveLoader', $upload_id, 'Y', 
		    $notify_notsummary);
    exit 9;
}

###############################################################
### Set Processed to 1 in mri_upload table#####################
###############################################################
my $where = "WHERE TarchiveID=?";
$query = "UPDATE mri_upload SET InsertionComplete=1 ";
$query = $query . $where;

my $mri_upload_update = $dbh->prepare($query);
$mri_upload_update->execute($tarchiveInfo{TarchiveID});

exit 0;

=pod

=head3 logHeader($date, $tarchive, $TmpDir)

Function that adds a header with relevant information to the log file

INPUTS:
 - $date       : Date and time of upload
 - $tarchive   : Location of source data
 - $TmpDir     : Location of the temporary directory

=cut

sub logHeader ($date, $tarchive, $TmpDir) {
    print LOG "
    ----------------------------------------------------------------
            AUTOMATED DICOM DATA UPLOAD
    ----------------------------------------------------------------
    *** Date and time of upload    : $date
    *** Location of source data    : $tarchive
    *** tmp dir location           : $TmpDir
    ";
}



__END__

=pod

=head1 TO DO

- dicom_to_minc: change converter back to perl (or make configurable)

- add a check for all programms that will be used (exists, but could
  be better....)

- consider whether to add a check for registered protocols against the
  tarchive db to save a few minutes of converting

- also add an option to make it interactively query user to learn new protocols

- add to config file whether or not to autocreate scanners


=head1 BUGS

None reported.

=head1 LICENSING

License: GPLv3

=head1 AUTHORS

J-Sebastian Muehlboeck based on Jonathan Harlap\'s process_uploads, LORIS
community <loris.info@mcin.ca> and McGill Centre for Integrative Neuroscience

=cut
