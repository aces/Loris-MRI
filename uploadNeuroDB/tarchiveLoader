#! /usr/bin/perl
# $Id: tarchiveLoader,v 1.24 2007/12/18 16:00:21 sebas Exp $

=pod

TODO

- dicom_to_minc: change converter back to perl (or make configurable)
- add a check for all programms that will be used (exists, but could 
- be better....)
- consider whether to add a check for registered protocols against the
- tarchive db to save a few minutes of converting
- also add an option to make it interactively query user to learn new protocols
- this should be a separate program
- add to config file whether or not to autocreate scanners

This script interacts with the NeuroDB database system. It will connect to/deal
with/ modify contents of the
following tables:
session, parameter_file, parameter_type, parameter_type_category, files, 
mri_staging, notification_spool

=cut

use strict;
use warnings;
use Carp;
use Getopt::Tabular;
use FileHandle;
use File::Basename;
use File::Temp qw/ tempdir /;
use Data::Dumper;
use FindBin;
use Cwd qw/ abs_path /;

# These are the NeuroDB modules to be used
use lib "$FindBin::Bin";

use NeuroDB::File;
use NeuroDB::MRI;
use NeuroDB::DBI;
use NeuroDB::Notify;
use NeuroDB::MRIProcessingUtility;

## Turn on autoflush for standard output buffer so that we immediately see
## the results of print statements.
$|++;

## Starting the program
my $versionInfo = sprintf "%d revision %2d",
  q$Revision: 1.24 $ =~ /: (\d+)\.(\d+)/;

## Needed for log and template
my ( $sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst ) =
  localtime(time);
my $date = sprintf(
    "%4d-%02d-%02d %02d:%02d:%02d",
    $year + 1900,
    $mon + 1, $mday, $hour, $min, $sec
);
my $debug       = 1;
my $message     = '';
my $verbose     = 0;   # Default for now
my $reckless    = 0;   # Only for playing and testing. Don't set it to 1!!!
my $force       = 0;   # Force the script to run even if validation has failed
my $NewScanner  = 1;   # This should be the default unless you are a control freak
my $xlog        = 0;   # Default should be 0
my $no_jiv      = 0;   # Should bet set to 1, if jivs should not be created
my $valid_study = 0;
my $profile     = 'prod';   # This should never be set unless you are in a
                            # stable production environment
my $globArchiveLocation = 0;     # Whether to use strict ArchiveLocation strings
                                 # or to glob them (like '%Loc')
my $newTarchiveLocation = undef;

my @opt_table = (
    [ "Basic options", "section" ],
    [
        "-profile", "string", 1, \$profile,
        "Name of config file in ../dicom-archive/.loris_mri"
    ],
    [
        "-force", "boolean", 1, \$force,
        "Forces the script to run even if the validation has failed."
    ],
    [ "Advanced options", "section" ],
    [
        "-reckless", "boolean", 1, \$reckless,
        "Upload data even if study protocol is not defined or violated."
    ],
    [
        "-globLocation",
        "boolean",
        1,
        \$globArchiveLocation,
        "Loosen the validity check of the tarchive allowing for the "
          . "possibility that the tarchive was moved to a different directory."
    ],
    [
        "-noJIV", "boolean", 1, \$no_jiv,
        "Prevents the JIVs from being created."
    ],
    [
        "-newScanner",
        "boolean",
        1,
        \$NewScanner,
        "By default a new scanner will be registered if the data you upload "
          . "requires it. You can risk turning it off."
    ],
    [ "Fancy options", "section" ],

    # FIXME		 ["-keeptmp", "boolean", 1, \$keep, "Keep temp dir. Makes sense if
    # have infinite space on your server."],
    [
        "-xlog", "boolean", 1, \$xlog,
        "Open an xterm with a tail on the current log file."
    ],
    [ "General options", "section" ],
    [ "-verbose", "boolean", 1, \$verbose, "Be verbose." ],
);

my $Help = <<HELP;
******************************************************************************
TARCHIVE LOADER 
******************************************************************************

Author  :   J-Sebastian Muehlboeck based on Jonathan Harlap\'s process_uploads 
            using the all singing and dancing (eierlegende Wollmilchsau) 
            NeuroDB lib
Date    :   2006/12/20
Version :   $versionInfo

This takes a [dicom{T(ar}]chive) as an argument and 
performs a lot of magic on the acquisitions within it.  

- archive verification
- candidate id extraction and/or neurodb candidate creation
- study site determination
- scanner identity check  
- dicom to minc conversion
- miscellaneous header data extraction
- file relocation (to the MRI repository)
- neuroDB mri database registration and JIVification.

HELP

my $Usage = <<USAGE;
usage: $0 </path/to/DICOM-tarchive> [options]
       $0 -help to list options

USAGE

&Getopt::Tabular::SetHelp( $Help, $Usage );
&Getopt::Tabular::GetOptions( \@opt_table, \@ARGV ) || exit 1;

################################################################
################### input option error checking ################
################################################################

{ package Settings; do "$ENV{LORIS_CONFIG}/.loris_mri/$profile" }
if ( $profile && !defined @Settings::db ) {
    print "\n\tERROR: You don't have a configuration file named "
      . "'$profile' in:  $ENV{LORIS_CONFIG}/.loris_mri/ \n\n";
    exit 2;
}
if ( !$ARGV[0] || !$profile ) {
    print $Help;
    print "$Usage\n\tERROR: You must specify a valid tarchive and an "
      . "existing profile.\n\n";
    exit 3;
}

my $tarchive = abs_path( $ARGV[0] );
unless ( -e $tarchive ) {
    print "\nERROR: Could not find archive $tarchive. \n "
      . "Please, make sure the path to the archive is correct. "
      . "Upload will exit now.\n\n\n";
    exit 4;
}

################################################################
#### These settings are in a config file (profile) #############
################################################################
my $data_dir       = $Settings::data_dir;
my $pic_dir        = $data_dir . '/pic';
my $jiv_dir        = $data_dir . '/jiv';
my $prefix         = $Settings::prefix;
my $converter      = $Settings::converter;
my $mail_user      = $Settings::mail_user;
my $get_dicom_info = $Settings::get_dicom_info;
my $exclude        = "localizer";                    # Case insensitive
my $template       = "TarLoad-$hour-$min-XXXXXX";    # For tempdir
my $User           = `whoami`;

# FIXME there are better ways
my @progs = ( "convert", "Mincinfo_wrapper", "mincpik", $converter );

# Create the temp dir
my $TmpDir = tempdir(
    $template,
    TMPDIR  => 1,
    CLEANUP => 1
);

# Create logdir (if !exists) and logfile
my @temp    = split( /\//, $TmpDir );
my $templog = $temp[$#temp];
my $LogDir  = "$data_dir/logs";
if ( !-d $LogDir ) {
    mkdir( $LogDir, 0700 );
}
my $logfile = "$LogDir/$templog.log";
open LOG, ">$logfile";
LOG->autoflush(1);
&logHeader();

################################################################
############### If xlog is set, fork a tail on log file. #######
################################################################
my $childPID;
if ($xlog) {
    $childPID = fork();
    if ( $childPID == 0 ) {
        exec("xterm -geometry 130x70 -e tail -f $logfile");
        exit(0);
    }
}

################################################################
######### Establish database connection ########################
################################################################
my $dbh = &NeuroDB::DBI::connect_to_db(@Settings::db);
print LOG "\n==> Successfully connected to database \n";

=pod
################################################################
################################################################
 Get useful information from the tarchive table  - The regex is 
very study specific... !!!!!! FIXME
 FIXME figure out a way to get rid of study specific ways of 
extracting information ... if there is 
 This will query the tarchive and retrieve (hopefully) enough
 information to continue the upload.
# FIXME documentation needed
=cut

################################################################
################## Instantiate MRIProcessingUtility ############
################################################################
my $utility =
  NeuroDB::MRIProcessingUtility->new( \$dbh, $debug, $TmpDir, $logfile,
    $LogDir, $verbose );

################################################################
################ Register programs #############################
################################################################
$utility->registerProgs(@progs);

################################################################
################ Construct the tarchiveInfo Array ##############
################################################################
my %tarchiveInfo =
  $utility->createTarchiveArray( $tarchive, $globArchiveLocation );

################################################################
################## Call the validation script ##################
################################################################
my $script = "tarchive_validation.pl $tarchive -profile $profile ";

if ($globArchiveLocation) {
    $script .= " -globLocation";
}
################################################################
###### Note: system call returns the process ID ################
###### To the actual exit value, shift right by ################
###### eight as done below #####################################
################################################################
my $output = system($script);
$output = $output >> 8;

################################################################
############ Exit if the is_valid is false and $force is not ###
################################################################
if ( ( $output != 0 ) && ( $force == 0 ) ) {
    $message = <<MESSAGE;

    ERROR: The validation has failed. Either re-run the
           validation again and fix the problem. Or re-run
           tarchiveLoader using -force to force the execution.

MESSAGE
    $utility->writeErrorLog( $message, 5, $logfile );
    exit 5;
}

################################################################
########## Get the $center_name, $centerID ################
################################################################
my ( $center_name, $centerID ) = $utility->determinePSC( \%tarchiveInfo, 0 );

################################################################
######### Determine the ScannerID ##############################
################################################################
my $scannerID =
  $utility->determineScannerID( \%tarchiveInfo, 0, $centerID, $NewScanner );

################################################################
###### Construct the $subjectIDsref array ######################
################################################################
my $subjectIDsref =
  $utility->determineSubjectID( $scannerID, \%tarchiveInfo, 0 );

################################################################
###### Get the SessionID #######################################
################################################################
if ( !defined( $subjectIDsref->{'visitLabel'} ) ) {
    $subjectIDsref->{'visitLabel'} =
      $utility->lookupNextVisitLabel( $subjectIDsref->{'CandID'}, \$dbh );
}
my ( $sessionID, $requiresStaging ) = &NeuroDB::MRI::getSessionID(
    $subjectIDsref, $tarchiveInfo{'DateAcquired'},
    \$dbh,          $subjectIDsref->{'subprojectID'}
);

################################################################
###### Extract the tarchive and feed the dicom data ############
###### Dir to the uploader #####################################
################################################################
my ( $ExtractSuffix, $study_dir, $header ) =
  $utility->extractAndParseTarchive($tarchive);

################################################################
##### Make the notifier object #################################
################################################################
my $notifier = &NeuroDB::Notify->new( \$dbh );

################################################################
##################### Convert the dicom data to minc ###########
################################################################
$utility->dicom_to_minc( $study_dir, $converter, $get_dicom_info,
    $exclude, $mail_user );

################################################################
############### Get a list of mincs ############################
################################################################
my @minc_files = ();
$utility->get_mincs( \@minc_files );
my $mcount = $#minc_files + 1;
$message = <<MESSAGE;

Number of MINC files that will be considered for inserting 
into the database: $mcount

MESSAGE
print $message;

################################################################
# If no good data was found stop processing and write error log.
################################################################
if ( $mcount < 1 ) {
    $message = <<MESSAGE;

No data could be converted into valid MINC files. 
Localizers will not be considered!

MESSAGE
    $utility->writeErrorLog( $message, 6, $logfile );
    exit 6;
}

################################################################
#################### LOOP through MINCs ########################
# At this step we actually have (multiple) MINC files so we loop
# a valid study has at least one file that can be uploaded #####
################################################################
my $minc_inserted = 0;
foreach my $minc (@minc_files) {

    ############################################################
    # If the tarchive has not been moved yet ###################
    # ($valid_study undefined)-> move the tarchive from the ####
    # inbox into the tarchive library ##########################
    ############################################################
    if (
        ( !defined($Settings::tarchiveLibraryDir) )
        || (   ( defined($Settings::tarchiveLibraryDir) )
            && ( $tarchive =~ m/$Settings::tarchiveLibraryDir\/\d\d\d\d\//i ) )
      )
    {
        $newTarchiveLocation = $tarchive;
    }
    elsif ( !$valid_study ) {
        $newTarchiveLocation =
          $utility->moveAndUpdateTarchive( $tarchive, \%tarchiveInfo );
    }
    $tarchive = $newTarchiveLocation;

    ###########################################################
    ############# Call the minc_insertion script ##############
    ###########################################################
    $script = "minc_insertion.pl -tarchivePath $tarchive "
      . "-mincPath $minc -profile $profile";

    if ($force) {
        $script .= " -force";
    }

    if ($globArchiveLocation) {
        $script .= " -globLocation";
    }

    if ($no_jiv) {
        $script .= " -noJIV";
    }

    if ($debug) {
        print $script . "\n";
    }

    ###########################################################
    ## Note: system call returns the process ID ###############
    ## To get the actual exit value, shift right by eight as ##
    ## done below #############################################
    ###########################################################
    $output = system($script);
    $output = $output >> 8;

    ###########################################################
    #### If the return code of the script is 0 ################
    #### mark the study as valid because this means at least ##
    #### one volume will be inserted into the DB ##############
    ###########################################################
    if ( $output == 0 ) {
        $minc_inserted++;
        $valid_study = 1;
    }
}    # end foreach $minc

if ($valid_study) {

    ############################################################
    ### Update the number_of_mincCreated #######################
    ### And number_of_mincInserted #############################
    ############################################################
    my $query = <<QUERY;
UPDATE 
  mri_upload 
SET 
  number_of_mincInserted=?, 
  number_of_mincCreated=?
WHERE
  TarchiveID=?
QUERY
    if ($debug) {
        print $query . "\n";
    }

    my $mri_upload_update = $dbh->prepare($query);
    my @query_parameters =
      ( $minc_inserted, $mcount, $tarchiveInfo{TarchiveID} );
    $mri_upload_update->execute(@query_parameters);

    ############################################################
    ############# Create minc-pics #############################
    ############################################################
    $query = <<QUERY;
SELECT 
  Min(FileID) AS min, 
  Max(FileID) as max 
FROM 
  files
WHERE
  TarchiveSource=?
QUERY
    if ($debug) {
        print $query . "\n";
    }
    my $sth = $dbh->prepare($query);
    $sth->execute( $tarchiveInfo{TarchiveID} );
    my @row = $sth->fetchrow_array();
    if (@row) {
        my $script = "mass_pic.pl -minFileID $row[0] -maxFileID $row[1] "
          . "-profile $profile ";
        ############################################################
        ## Note: system call returns the process ID ################
        ## To get the actual exit value, shift right by eight as ###
        ## done below ##############################################
        ############################################################
        $output = system($script);
        $output = $output >> 8;

    }

    ############################################################
    # Spool a new study message ################################
    ############################################################
    $notifier->spool(
        'mri new study',
        $subjectIDsref->{'CandID'} . " "
          . $subjectIDsref->{'PSCID'} . " "
          . $subjectIDsref->{'visitLabel'}
          . "\tacquired "
          . $tarchiveInfo{'DateAcquired'}
    );
    ############################################################
    #### Link the tarchive and mri_upload table  with session ##
    ############################################################
    $query = <<QUERY;
UPDATE 
  tarchive t 
JOIN 
  mri_upload m ON (m.tarchiveID=t.tarchiveID) 
SET 
  t.SessionID=?, 
  m.sessionID=? 
WHERE 
  t.TarchiveID=?    
QUERY
    if ($debug) {
        print $query . "\n";
    }
    my $session_update = $dbh->prepare($query);
    @query_parameters = ( $sessionID, $sessionID, $tarchiveInfo{'TarchiveID'} );
    $session_update->execute(@query_parameters);

}
else {
    ############################################################
    ## Spool a failure message This has been changed to tarchive
    ## instead of using patientName ############################
    ############################################################
    my $spool_message = <<MESSAGE;

$tarchive acquired $tarchiveInfo{'DateAcquired'} was deemed invalid

$study_dir

MESSAGE
    $notifier->spool( 'mri invalid study', $spool_message );
}

################################################################
# Make final logfile name without overwriting phantom logs #####
################################################################
my $final_logfile =
    $center_name . "_"
  . $tarchiveInfo{'DateAcquired'} . '_'
  . $subjectIDsref->{'CandID'};

if ( $subjectIDsref->{'isPhantom'} ) {
    $final_logfile =
        $subjectIDsref->{'PSCID'} . "_"
      . $tarchiveInfo{'DateAcquired'} . '_'
      . $subjectIDsref->{'CandID'};
}

################################################################
### TarchiveLocation ###########################################
### If something went wrong and there is no acq date and CandID
################################################################
unless ( $tarchiveInfo{'DateAcquired'} && $subjectIDsref->{'CandID'} ) {
    $final_logfile .= '_' . $temp[$#temp];
}
$final_logfile .= '.log.gz';

################################################################
# FIXME for now we assume that extracted data will not be kept #
################################################################
my $cleanup = "rm -rf ${TmpDir}/${ExtractSuffix}*";
$message = <<MESSAGE;

Cleaning up temp files: $cleanup

MESSAGE
print $message if $verbose;
system($cleanup);

################################################################
## If there are leftovers, dump them in the trashbin ###########
################################################################
my @leftovers = `\\ls -1 $TmpDir`;

if ( scalar(@leftovers) > 0 ) {
    my $trashdir    = $data_dir . '/trashbin/' . $temp[$#temp];
    my $leftover_nb = scalar(@leftovers);
    my $log_message = <<MESSAGE;

==> LEFTOVERS: $leftover_nb
 --> Moving leftovers to $trashdir

MESSAGE
    print LOG $log_message;
    system("mkdir -p -m 755 $trashdir");
    system("chmod -R u+w $TmpDir/*");
    system("mv $TmpDir/* $trashdir");

    my $leftovers_list = join( "", @leftovers );
    my $mail_message = <<MAIL;

Subject: [URGENT Automated] upload NeuroDB leftovers!
Moved some leftovers to $trashdir
Log of process in $data_dir/logs/$final_logfile
Files left over:
$leftovers_list

MAIL
    open MAIL, "| mail $mail_user";
    print MAIL $mail_message;
    close MAIL;
}

print LOG "\n==> Done!  Removing $TmpDir.\n";
close LOG;

my $gzip_cmd = "gzip -9 $logfile";
my $mv_cmd   = "mv $logfile.gz $data_dir/logs/$final_logfile";
system($gzip_cmd);
system($mv_cmd);
################################################################
############# Kill the xterm with the tail on log ##############
################################################################
if ($xlog) {
    `kill -9 $childPID`;
}
################################################################
############# If no mincs are inserted or the valid_study is ###
############## false, the exit code will not be 0 ##############
################################################################

if ( !$valid_study ) {
    print "No Mincs inserted \n \n";
    exit 9;
}
exit 0;

sub logHeader () {

    my $header = <<HEADER;

    ----------------------------------------------------------------
            AUTOMATED DICOM DATA UPLOAD
    ----------------------------------------------------------------
    *** Date and time of upload    : $date
    *** Location of source data    : $tarchive
    *** tmp dir location           : $TmpDir

HEADER

    print LOG $header;
}
