#!/usr/bin/perl -w

use strict;
use NeuroDB::DBI;
use Getopt::Tabular;
use Data::Dumper;

my $update = 1;
my @studies = ();

my $version        = 0;
my $noUpdateSwitch = 0;
my $profile        = "prod";
my $verbose        = 0;


my $Usage = "------------------------------------------
 
 WHAT THIS IS:

 Finds newly received tarchives that need processing into NeuroDB

 Assumes DB contains a table as follows:


    CREATE TABLE tarchive_find_new_uploads (
       CenterName varchar(255) NOT NULL PRIMARY KEY,
       LastRan datetime DEFAULT NULL
     );

 
 Usage:\n\t $0 [options]
 \n\n See $0 -help for more info\n\n";
 
 my @arg_table =
     (
      ["Input and database options", "section"],
      ["-profile","string",1, \$profile, "Specify the name of the config file which resides in .loris_mri in the current directory."],
      ["-noupdate","boolean",1, \$noUpdateSwitch, "Do not update the tables in the database."],
      ["General options", "section"],
      ["-verbose", "boolean", 1,   \$verbose, "Be verbose."],
      ["-version", "boolean", 1,   \$version, "Print cvs version number and exit."],
      );
 
 GetOptions(\@arg_table, \@ARGV) ||  exit 1;
 
if ($version) { print "Version: $version\n"; exit; }
if(scalar(@ARGV) != 0) { print "\nError: \n\n".$Usage; exit 1; }


#####Get config setting#######################################################
if(-f "$ENV{LORIS_CONFIG}/.loris_mri/$profile") {
     { package Settings; do "$ENV{LORIS_CONFIG}/.loris_mri/$profile" }
}
 else{
     print "\n\tERROR: You don't have a configuration file named '$profile' in:  $ENV{LORIS_CONFIG}/.loris_mri/ \n\n"; exit 33;
 }
#######################################################################################

my $dbh = &NeuroDB::DBI::connect_to_db(@Settings::db);

# get path to tarchiveLibraryDir from the database
my $tarchiveLibraryDir = &NeuroDB::DBI::getConfigSetting(
                            \$dbh,'tarchiveLibraryDir'
                            );
$tarchiveLibraryDir    =~ s/\/$//g;

my $mail_user = &NeuroDB::DBI::getConfigSetting(
                    \$dbh,'mail_user'
                    );

if($noUpdateSwitch == 1) { 
    $update=0; 
}

# get the sites using this transfer system and when each of them was last processed for new data
my $query = "SELECT CenterName, LastRan FROM tarchive_find_new_uploads";
my $sth = $dbh->prepare($query);
$sth->execute();


if($sth->rows > 0) {
    # make the query to find the new LastRan
    my $lastransth = $dbh->prepare("SELECT MAX(DateSent) AS NewLastRan FROM tarchive WHERE neurodbCenterName=?");

    # make the query to get new tarchives
    my $liststh = $dbh->prepare("SELECT ArchiveLocation FROM tarchive WHERE neurodbCenterName=? AND PendingTransfer=0 AND DateSent > ? ORDER BY DateSent ASC");

    # make the query to update the new-tarchive-finder state table
    my $updatesth = $dbh->prepare("UPDATE tarchive_find_new_uploads SET LastRan=? WHERE CenterName=?");

    # loop over the sites
    while(my $row = $sth->fetchrow_hashref()) {

        # repopulate the tarchive table
        if($update) {
            my $cmd = "load_tarchive_db.sh ".$row->{'CenterName'};
            `$cmd`;
        }

        # get the new last ran date
        my $newlastran = $dbh->selectrow_hashref($lastransth, undef, $row->{'CenterName'});
        
        # Get the list of new tarchives for the given site
        $liststh->execute($row->{'CenterName'}, $row->{'LastRan'});
        if($liststh->rows > 0) {
            
            # loop over the tarchives
            while(my @tarchive = $liststh->fetchrow_array()) {
                $tarchive[0] =~ /(\d{4}\/.*)$/;
                my $tarchivePath = $tarchiveLibraryDir . "/" . $1;
                push @studies, [$row->{'CenterName'}, $tarchivePath];
                print $row->{'CenterName'}."\t".$tarchivePath."\n";
            }
        }

        # [optionally] update the new-tarchive-finder state table
        if($update) {
            $updatesth->execute($newlastran->{'NewLastRan'}, $row->{'CenterName'});
        }
    }
}

# print out which ones were queued
if($update && (scalar(@studies) > 0)) {
    open MAIL, "|mail $mail_user";
    print MAIL "Subject: FIND_UPLOADS_TARCHIVE: ".scalar(@studies)." studies found.\n";
    foreach my $study (@studies) {
        print MAIL "$study->[0]    $study->[1]\n";
    }
    close MAIL;
}
